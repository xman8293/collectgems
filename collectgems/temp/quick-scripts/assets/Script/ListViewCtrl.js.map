{"version":3,"sources":["ListViewCtrl.js"],"names":["global","require","cc","Class","extends","Component","properties","itemTemplate","default","type","Node","scrollView","ScrollView","spawnCount","totalCount","spacing","bufferZone","onLoad","content","items","initialize","updateTimer","updateInterval","lastContentPosY","tasklist","TaskList","length","log","JSON","stringify","i","item","instantiate","addChild","setPosition","width","getComponent","initializeCard","push","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","update","dt"],"mappings":";;;;;;AAAA,IAAIA,SAAQC,QAAQ,QAAR,CAAZ;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,sBAAc,EAAE;AACZC,qBAAS,IADC;AAEVC,kBAAMP,GAAGQ;AAFC,SADN;AAKRC,oBAAY;AACXH,qBAAS,IADE;AAEXC,kBAAMP,GAAGU;AAFE,SALJ;AASRC,oBAAY,CATJ,EASO;AACfC,oBAAY,CAVJ,EAUO;AACfC,iBAAS,CAXD,EAWI;AACZC,oBAAY,CAZJ,CAYO;;AAZP,KAHP;;AAmBL;AACAC,YAAQ,kBAAY;;AAEnB,aAAKC,OAAL,GAAe,KAAKP,UAAL,CAAgBO,OAA/B;AACG,aAAKC,KAAL,GAAa,EAAb,CAHgB,CAGC;AACpB,aAAKC,UAAL;AACG,aAAKC,WAAL,GAAmB,CAAnB;AACA,aAAKC,cAAL,GAAsB,GAAtB;AACA,aAAKC,eAAL,GAAuB,CAAvB,CAPgB,CAOU;AAC7B,KA5BI;;AA8BLH,gBAAY,sBAAY;AACpB;;AAEC,YAAII,WAASxB,OAAOyB,QAApB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAKZ,UAAL,GAAgBW,SAASE,MAAzB;AACAxB,WAAGyB,GAAH,CAAOC,KAAKC,SAAL,CAAeL,QAAf,CAAP;AACA,aAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAI,KAAKjB,UAAzB,EAAqC,EAAEiB,CAAvC,EAA0C;AAAE;AAC9C,gBAAIC,OAAO7B,GAAG8B,WAAH,CAAe,KAAKzB,YAApB,CAAX;AACA,iBAAKW,OAAL,CAAae,QAAb,CAAsBF,IAAtB;AACAA,iBAAKG,WAAL,CAAiBH,KAAKI,KAAL,IAAc,MAAML,CAApB,IAAyB,KAAKf,OAAL,IAAgBe,IAAI,CAApB,CAA1C,EAAiE,CAAC,GAAlE;AACMC,iBAAKK,YAAL,CAAkB,UAAlB,EAA8BC,cAA9B,CAA6CP,CAA7C,EAA+CN,SAASM,CAAT,CAA/C;AACA5B,eAAGyB,GAAH,CAAO,YAAWG,CAAlB;AACA5B,eAAGyB,GAAH,CAAOH,SAASM,CAAT,CAAP;AACA,iBAAKX,KAAL,CAAWmB,IAAX,CAAgBP,IAAhB;AACN;AACD,KA1EI;;AA4ELQ,uBAAmB,2BAAUR,IAAV,EAAgB;AAAE;AACjC,YAAIS,WAAWT,KAAKU,MAAL,CAAYC,qBAAZ,CAAkCX,KAAKY,QAAvC,CAAf;AACA,YAAIC,UAAU,KAAKjC,UAAL,CAAgBkC,IAAhB,CAAqBC,oBAArB,CAA0CN,QAA1C,CAAd;AACA,eAAOI,OAAP;AACH,KAhFI;;AAkFLG,YAAQ,gBAASC,EAAT,EAAa,CAEpB;;AApFI,CAAT","file":"ListViewCtrl.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var global =require(\"Global\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        itemTemplate: { // item template to instantiate other items\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        scrollView: {\r\n        \tdefault: null,\r\n        \ttype: cc.ScrollView\r\n        },\r\n        spawnCount: 0, // how many items we actually spawn\r\n        totalCount: 0, // how many items we need for the whole list\r\n        spacing: 0, // space between each item\r\n        bufferZone: 0, // when item is away from bufferZone, we relocate it\r\n       \r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n      \r\n    \tthis.content = this.scrollView.content;\r\n        this.items = []; // array to store spawned items\r\n    \tthis.initialize();\r\n        this.updateTimer = 0;\r\n        this.updateInterval = 0.2;\r\n        this.lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\r\n    },\r\n\r\n    initialize: function () {\r\n        //this.content.width = this.totalCount * (this.itemTemplate.width + this.spacing) + this.spacing; // get total content width\r\n\r\n         let tasklist=global.TaskList;\r\n        // let task={};\r\n        // task.TaskTitle=\"按时完成作业\";//任务描述\r\n        // task.IsGet=false;//是否完成\r\n        // task.GemsCount=2;//奖励数量\r\n        // task.TaskDay=\"2019-04-06\";//任务完成事件\r\n        // task.TaskType=\"D\";//任务类型D天W星期\r\n        // tasklist.push(task);\r\n        // let task1={};\r\n        // task1.TaskTitle=\"按时起床\";//任务描述\r\n        // task1.IsGet=false;//是否完成\r\n        // task1.GemsCount=1;//奖励数量\r\n        // task1.TaskDay=\"2019-04-06\";//任务完成事件\r\n        // task1.TaskType=\"D\";//任务类型D天W星期\r\n        // tasklist.push(task1);\r\n        // let task2={};\r\n        // task2.TaskTitle=\"9:30上床睡觉\";//任务描述\r\n        // task2.IsGet=false;//是否完成\r\n        // task2.GemsCount=2;//奖励数量\r\n        // task2.TaskDay=\"2019-04-06\";//任务完成事件\r\n        // task2.TaskType=\"D\";//任务类型D天W星期\r\n        // tasklist.push(task2);\r\n        // let task3={};\r\n        // task3.TaskTitle=\"户外足球一小时\";//任务描述\r\n        // task3.IsGet=false;//是否完成\r\n        // task3.GemsCount=2;//奖励数量\r\n        // task3.TaskDay=\"2019-04-06\";//任务完成事件\r\n        // task3.TaskType=\"D\";//任务类型D天W星期\r\n        // tasklist.push(task3);\r\n        \r\n        this.spawnCount=tasklist.length;\r\n        cc.log(JSON.stringify(tasklist));\r\n        for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\r\n    \t\tlet item = cc.instantiate(this.itemTemplate);\r\n    \t\tthis.content.addChild(item);\r\n    \t\titem.setPosition(item.width * (0.5 + i) + this.spacing * (i + 1),-160);\r\n            item.getComponent('taskcard').initializeCard(i,tasklist[i]);\r\n            cc.log(\"Index :\" +i);\r\n            cc.log(tasklist[i]);\r\n            this.items.push(item);\r\n    \t}\r\n    },\r\n\r\n    getPositionInView: function (item) { // get item position in scrollview's node space\r\n        let worldPos = item.parent.convertToWorldSpaceAR(item.position);\r\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\r\n        return viewPos;\r\n    },\r\n\r\n    update: function(dt) {\r\n    \r\n    },\r\n\r\n  \r\n});\r\n"]}