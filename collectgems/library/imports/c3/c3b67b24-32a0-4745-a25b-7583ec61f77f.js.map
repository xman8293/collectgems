{"version":3,"sources":["../../../../assets/Script/assets/Script/ListViewCtrl.js"],"names":["cc","Class","extends","Component","properties","itemTemplate","default","type","Node","scrollView","ScrollView","spawnCount","totalCount","spacing","bufferZone","onLoad","content","items","initialize","updateTimer","updateInterval","lastContentPosY","height","tasklist","task","TaskTitle","IsGet","GemsCount","TaskDay","TaskType","push","task1","task2","task3","length","i","item","instantiate","addChild","setPosition","getComponent","updateItem","log","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","update","dt"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,sBAAc,EAAE;AACZC,qBAAS,IADC;AAEVC,kBAAMP,GAAGQ;AAFC,SADN;AAKRC,oBAAY;AACXH,qBAAS,IADE;AAEXC,kBAAMP,GAAGU;AAFE,SALJ;AASRC,oBAAY,CATJ,EASO;AACfC,oBAAY,CAVJ,EAUO;AACfC,iBAAS,CAXD,EAWI;AACZC,oBAAY,CAZJ,CAYO;AACf;AACA;AACA;AACA;AACA;AACA;AAlBQ,KAHP;;AAwBL;AACAC,YAAQ,kBAAY;AACnB,aAAKC,OAAL,GAAe,KAAKP,UAAL,CAAgBO,OAA/B;AACG,aAAKC,KAAL,GAAa,EAAb,CAFgB,CAEC;AACpB,aAAKC,UAAL;AACG,aAAKC,WAAL,GAAmB,CAAnB;AACA,aAAKC,cAAL,GAAsB,GAAtB;AACA,aAAKC,eAAL,GAAuB,CAAvB,CANgB,CAMU;AAC7B,KAhCI;;AAkCLH,gBAAY,sBAAY;AACpB,aAAKF,OAAL,CAAaM,MAAb,GAAsB,KAAKV,UAAL,IAAmB,KAAKP,YAAL,CAAkBiB,MAAlB,GAA2B,KAAKT,OAAnD,IAA8D,KAAKA,OAAzF,CADoB,CAC8E;AAClG,YAAIU,WAAS,EAAb;AACA,YAAIC,OAAK,EAAT;AACAA,aAAKC,SAAL,GAAe,QAAf,CAJoB,CAII;AACxBD,aAAKE,KAAL,GAAW,KAAX,CALoB,CAKH;AACjBF,aAAKG,SAAL,GAAe,CAAf,CANoB,CAMH;AACjBH,aAAKI,OAAL,GAAa,YAAb,CAPoB,CAOM;AAC1BJ,aAAKK,QAAL,GAAc,GAAd,CARoB,CAQF;AAClBN,iBAASO,IAAT,CAAcN,IAAd;AACA,YAAIO,QAAM,EAAV;AACAA,cAAMN,SAAN,GAAgB,MAAhB,CAXoB,CAWG;AACvBM,cAAML,KAAN,GAAY,KAAZ,CAZoB,CAYF;AAClBK,cAAMJ,SAAN,GAAgB,CAAhB,CAboB,CAaF;AAClBI,cAAMH,OAAN,GAAc,YAAd,CAdoB,CAcO;AAC3BG,cAAMF,QAAN,GAAe,GAAf,CAfoB,CAeD;AACnBN,iBAASO,IAAT,CAAcC,KAAd;AACA,YAAIC,QAAM,EAAV;AACAA,cAAMP,SAAN,GAAgB,UAAhB,CAlBoB,CAkBO;AAC3BO,cAAMN,KAAN,GAAY,KAAZ,CAnBoB,CAmBF;AAClBM,cAAML,SAAN,GAAgB,CAAhB,CApBoB,CAoBF;AAClBK,cAAMJ,OAAN,GAAc,YAAd,CArBoB,CAqBO;AAC3BI,cAAMH,QAAN,GAAe,GAAf,CAtBoB,CAsBD;AACnBN,iBAASO,IAAT,CAAcE,KAAd;AACA,YAAIC,QAAM,EAAV;AACAA,cAAMR,SAAN,GAAgB,SAAhB,CAzBoB,CAyBM;AAC1BQ,cAAMP,KAAN,GAAY,KAAZ,CA1BoB,CA0BF;AAClBO,cAAMN,SAAN,GAAgB,CAAhB,CA3BoB,CA2BF;AAClBM,cAAML,OAAN,GAAc,YAAd,CA5BoB,CA4BO;AAC3BK,cAAMJ,QAAN,GAAe,GAAf,CA7BoB,CA6BD;AACnBN,iBAASO,IAAT,CAAcG,KAAd;;AAEA,aAAKtB,UAAL,GAAgBY,SAASW,MAAzB;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKxB,UAAzB,EAAqC,EAAEwB,CAAvC,EAA0C;AAAE;AAC9C,gBAAIC,OAAOpC,GAAGqC,WAAH,CAAe,KAAKhC,YAApB,CAAX;AACA,iBAAKW,OAAL,CAAasB,QAAb,CAAsBF,IAAtB;AACAA,iBAAKG,WAAL,CAAiB,CAAjB,EAAoB,CAACH,KAAKd,MAAN,IAAgB,MAAMa,CAAtB,IAA2B,KAAKtB,OAAL,IAAgBsB,IAAI,CAApB,CAA/C;AACMC,iBAAKI,YAAL,CAAkB,UAAlB,EAA8BC,UAA9B,CAAyCN,CAAzC,EAA4CZ,SAASY,CAAT,CAA5C;AACAnC,eAAG0C,GAAH,CAAO,YAAWP,CAAlB;AACAnC,eAAG0C,GAAH,CAAOnB,SAASY,CAAT,CAAP;AACA,iBAAKlB,KAAL,CAAWa,IAAX,CAAgBM,IAAhB;AACN;AACD,KA5EI;;AA8ELO,uBAAmB,2BAAUP,IAAV,EAAgB;AAAE;AACjC,YAAIQ,WAAWR,KAAKS,MAAL,CAAYC,qBAAZ,CAAkCV,KAAKW,QAAvC,CAAf;AACA,YAAIC,UAAU,KAAKvC,UAAL,CAAgBwC,IAAhB,CAAqBC,oBAArB,CAA0CN,QAA1C,CAAd;AACA,eAAOI,OAAP;AACH,KAlFI;;AAoFLG,YAAQ,gBAASC,EAAT,EAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAtIK,CAAT","file":"ListViewCtrl.js","sourceRoot":"../../../../assets/Script","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        itemTemplate: { // item template to instantiate other items\n            default: null,\n            type: cc.Node\n        },\n        scrollView: {\n        \tdefault: null,\n        \ttype: cc.ScrollView\n        },\n        spawnCount: 0, // how many items we actually spawn\n        totalCount: 0, // how many items we need for the whole list\n        spacing: 0, // space between each item\n        bufferZone: 0, // when item is away from bufferZone, we relocate it\n        // lblScrollEvent: cc.Label,\n        // btnAddItem: cc.Button,\n        // btnRemoveItem: cc.Button,\n        // btnJumpToPosition: cc.Button,\n        // lblJumpPosition: cc.Label,\n        // lblTotalItems: cc.Label,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    \tthis.content = this.scrollView.content;\n        this.items = []; // array to store spawned items\n    \tthis.initialize();\n        this.updateTimer = 0;\n        this.updateInterval = 0.2;\n        this.lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\n    },\n\n    initialize: function () {\n        this.content.height = this.totalCount * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n        let tasklist=[];\n        let task={};\n        task.TaskTitle=\"按时完成作业\";//任务描述\n        task.IsGet=false;//是否完成\n        task.GemsCount=2;//奖励数量\n        task.TaskDay=\"2019-04-06\";//任务完成事件\n        task.TaskType=\"D\";//任务类型D天W星期\n        tasklist.push(task);\n        let task1={};\n        task1.TaskTitle=\"按时起床\";//任务描述\n        task1.IsGet=false;//是否完成\n        task1.GemsCount=1;//奖励数量\n        task1.TaskDay=\"2019-04-06\";//任务完成事件\n        task1.TaskType=\"D\";//任务类型D天W星期\n        tasklist.push(task1);\n        let task2={};\n        task2.TaskTitle=\"9:30上床睡觉\";//任务描述\n        task2.IsGet=false;//是否完成\n        task2.GemsCount=2;//奖励数量\n        task2.TaskDay=\"2019-04-06\";//任务完成事件\n        task2.TaskType=\"D\";//任务类型D天W星期\n        tasklist.push(task2);\n        let task3={};\n        task3.TaskTitle=\"户外足球一小时\";//任务描述\n        task3.IsGet=false;//是否完成\n        task3.GemsCount=2;//奖励数量\n        task3.TaskDay=\"2019-04-06\";//任务完成事件\n        task3.TaskType=\"D\";//任务类型D天W星期\n        tasklist.push(task3);\n        \n        this.spawnCount=tasklist.length;\n        for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\n    \t\tlet item = cc.instantiate(this.itemTemplate);\n    \t\tthis.content.addChild(item);\n    \t\titem.setPosition(0, -item.height * (0.5 + i) - this.spacing * (i + 1));\n            item.getComponent('taskcard').updateItem(i, tasklist[i]);\n            cc.log(\"Index :\" +i);\n            cc.log(tasklist[i]);\n            this.items.push(item);\n    \t}\n    },\n\n    getPositionInView: function (item) { // get item position in scrollview's node space\n        let worldPos = item.parent.convertToWorldSpaceAR(item.position);\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\n        return viewPos;\n    },\n\n    update: function(dt) {\n    //     this.updateTimer += dt;\n    //     if (this.updateTimer < this.updateInterval) return; // we don't need to do the math every frame\n    //     this.updateTimer = 0;\n    //     let items = this.items;\n    //     let buffer = this.bufferZone;\n    //     let isDown = this.scrollView.content.y < this.lastContentPosY; // scrolling direction\n    //     let offset = (this.itemTemplate.height + this.spacing) * items.length;\n    //     for (let i = 0; i < items.length; ++i) {\n    //         let viewPos = this.getPositionInView(items[i]);\n    //         if (isDown) {\n    //             // if away from buffer zone and not reaching top of content\n    //             if (viewPos.y < -buffer && items[i].y + offset < 0) {\n    //                 items[i].y=items[i].y + offset ;\n    //                 let item = items[i].getComponent('Item');\n    //                 let itemId = item.itemID - items.length; // update item id\n    //                 item.updateItem(i, itemId);\n    //             }\n    //         } else {\n    //             // if away from buffer zone and not reaching bottom of content\n    //             if (viewPos.y > buffer && items[i].y - offset > -this.content.height) {\n    //                 items[i].y=items[i].y - offset;\n    //                 let item = items[i].getComponent('Item');\n    //                 let itemId = item.itemID + items.length;\n    //                 item.updateItem(i, itemId);\n    //             }\n    //         }\n    //     }\n    //     // update lastContentPosY\n    //     this.lastContentPosY = this.scrollView.content.y;\n    //   //  this.lblTotalItems.String = \"Total Items: \" + this.totalCount;\n    },\n\n    // addItem: function() {\n    //     this.content.height = (this.totalCount + 1) * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n    //     this.totalCount = this.totalCount + 1;\n    // },\n\n    // removeItem: function() {\n    //     if (this.totalCount - 1 < 30) {\n    //         cc.error(\"can't remove item less than 30!\");\n    //         return;\n    //     }\n\n    //     this.content.height = (this.totalCount - 1) * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n    //     this.totalCount = this.totalCount - 1;\n    // },\n    \n    // scrollToFixedPosition: function () {\n    //     this.scrollView.scrollToOffset(cc.p(0, 500), 2);\n    // }\n});\n"]}